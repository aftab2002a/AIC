{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b83973d-9f71-436a-bdcf-e76e73d9d9ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: flask in c:\\users\\maroo\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (3.1.0)\n",
      "Requirement already satisfied: rdflib in c:\\users\\maroo\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (7.1.1)\n",
      "Requirement already satisfied: flask-ngrok in c:\\users\\maroo\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (0.0.25)\n",
      "Requirement already satisfied: Werkzeug>=3.1 in c:\\users\\maroo\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from flask) (3.1.3)\n",
      "Requirement already satisfied: Jinja2>=3.1.2 in c:\\users\\maroo\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from flask) (3.1.4)\n",
      "Requirement already satisfied: itsdangerous>=2.2 in c:\\users\\maroo\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from flask) (2.2.0)\n",
      "Requirement already satisfied: click>=8.1.3 in c:\\users\\maroo\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from flask) (8.1.7)\n",
      "Requirement already satisfied: blinker>=1.9 in c:\\users\\maroo\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from flask) (1.9.0)\n",
      "Requirement already satisfied: pyparsing<4,>=2.1.0 in c:\\users\\maroo\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from rdflib) (3.2.0)\n",
      "Requirement already satisfied: requests in c:\\users\\maroo\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from flask-ngrok) (2.32.3)\n",
      "Requirement already satisfied: colorama in c:\\users\\maroo\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from click>=8.1.3->flask) (0.4.6)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\maroo\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from Jinja2>=3.1.2->flask) (3.0.2)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\maroo\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from requests->flask-ngrok) (3.4.0)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\maroo\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from requests->flask-ngrok) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\maroo\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from requests->flask-ngrok) (2.2.3)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\maroo\\appdata\\local\\programs\\python\\python313\\lib\\site-packages (from requests->flask-ngrok) (2024.8.30)\n",
      "Ontology loaded successfully!\n",
      " * Serving Flask app '__main__'\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n",
      " * Running on all addresses (0.0.0.0)\n",
      " * Running on http://127.0.0.1:5000\n",
      " * Running on http://192.168.29.55:5000\n",
      "Press CTRL+C to quit\n",
      "192.168.29.55 - - [14/Dec/2024 16:18:16] \"GET / HTTP/1.1\" 200 -\n",
      "192.168.29.55 - - [14/Dec/2024 16:18:21] \"POST / HTTP/1.1\" 200 -\n",
      "192.168.29.55 - - [14/Dec/2024 16:18:27] \"POST / HTTP/1.1\" 200 -\n"
     ]
    }
   ],
   "source": [
    "# Step 1: Install Required Libraries\n",
    "!pip install flask rdflib flask-ngrok\n",
    "\n",
    "# Step 2: Import Necessary Modules\n",
    "from flask import Flask, render_template_string, request\n",
    "from rdflib import Graph\n",
    "\n",
    "# Step 3: Initialize Flask App\n",
    "app = Flask(__name__)\n",
    "\n",
    "# Step 4: Load the Ontology\n",
    "g = Graph()\n",
    "\n",
    "# Path to the OWL file generated by the previous script\n",
    "ontology_file = \"Updated_ChemistryBasics (1).owl\"  # Update if the file is in a different location\n",
    "\n",
    "try:\n",
    "    g.parse(ontology_file, format=\"xml\")\n",
    "    print(\"Ontology loaded successfully!\")\n",
    "except Exception as e:\n",
    "    print(f\"Error loading ontology: {e}\")\n",
    "\n",
    "# Step 5: Define Function to Query the Ontology\n",
    "def get_reactions():\n",
    "    query = \"\"\"\n",
    "    SELECT DISTINCT ?reaction ?reactant ?product ?condition\n",
    "    WHERE {\n",
    "        ?reaction a :ReactionType ;\n",
    "                  :hasReactant ?reactant ;\n",
    "                  :hasProduct ?product ;\n",
    "                  :requiresCondition ?condition .\n",
    "    }\n",
    "    \"\"\"\n",
    "    try:\n",
    "        results = g.query(query, initNs={\"\": \"http://www.semanticweb.org/ashra/ontologies/2024/10/ChemistryBasics#\"})\n",
    "        reactions = {}\n",
    "        for row in results:\n",
    "            reaction = row.reaction.split(\"#\")[-1]\n",
    "            reactant = row.reactant.split(\"#\")[-1]\n",
    "            product = row.product.split(\"#\")[-1]\n",
    "            condition = row.condition.split(\"#\")[-1]\n",
    "            if reaction not in reactions:\n",
    "                reactions[reaction] = {\"reactants\": [], \"products\": [], \"conditions\": condition}\n",
    "            reactions[reaction][\"reactants\"].append(reactant)\n",
    "            reactions[reaction][\"products\"].append(product)\n",
    "        return reactions\n",
    "    except Exception as e:\n",
    "        print(f\"Error querying ontology: {e}\")\n",
    "        return {}\n",
    "\n",
    "# Fetch Reaction Data from Ontology\n",
    "reaction_data = get_reactions()\n",
    "\n",
    "# Step 6: Define Flask Routes and UI\n",
    "@app.route(\"/\", methods=[\"GET\", \"POST\"])\n",
    "def index():\n",
    "    selected_reaction = None\n",
    "    result = \"\"\n",
    "\n",
    "    if request.method == \"POST\":\n",
    "        selected_reaction = request.form.get(\"reaction\")\n",
    "        if selected_reaction:\n",
    "            reactants = \", \".join(reaction_data[selected_reaction][\"reactants\"])\n",
    "            products = \", \".join(reaction_data[selected_reaction][\"products\"])\n",
    "            conditions = reaction_data[selected_reaction][\"conditions\"]\n",
    "            result = f\"\"\"\n",
    "            <h4>Details for {selected_reaction}:</h4>\n",
    "            <p><b>Reactants:</b> {reactants}</p>\n",
    "            <p><b>Products:</b> {products}</p>\n",
    "            <p><b>Conditions:</b> {conditions}</p>\n",
    "            \"\"\"\n",
    "\n",
    "    # HTML Template\n",
    "    html = f\"\"\"\n",
    "    <!DOCTYPE html>\n",
    "    <html>\n",
    "    <head>\n",
    "        <title>Intelligent Tutoring System</title>\n",
    "    </head>\n",
    "    <body style=\"font-family: Arial, sans-serif; margin: 20px;\">\n",
    "        <h2>Welcome to the Intelligent Tutoring System</h2>\n",
    "        <form method=\"POST\">\n",
    "            <label for=\"reaction\">Select a Reaction:</label>\n",
    "            <select name=\"reaction\" id=\"reaction\" required>\n",
    "                <option value=\"\">--Choose a reaction--</option>\n",
    "                {\"\".join([f\"<option value='{reaction}'>{reaction}</option>\" for reaction in reaction_data])}\n",
    "            </select>\n",
    "            <br><br>\n",
    "            <button type=\"submit\">Get Details</button>\n",
    "        </form>\n",
    "        <hr>\n",
    "        {result}\n",
    "    </body>\n",
    "    </html>\n",
    "    \"\"\"\n",
    "    return render_template_string(html)\n",
    "\n",
    "# Step 7: Run Flask App\n",
    "if __name__ == \"__main__\":\n",
    "    app.run(host=\"0.0.0.0\", port=5000)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "580cd411-3e8f-4fdf-8aad-9b29765ba231",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
